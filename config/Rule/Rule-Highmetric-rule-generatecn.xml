<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Highmetric-Rule-generateCN" type="FieldValue">
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
      <Argument name="link" type="Link">
        <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
      </Argument>
      <Argument name="group" type="ManagedAttribute">
        <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="project" type="ProvisioningProject">
        <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
      </Argument>
      <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
        <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
        <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="role" type="Bundle">
        <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="application" type="Application">
        <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="template" type="Template">
        <Description>
          The Template that contains this field.
        </Description>
      </Argument>
      <Argument name="field" type="Field">
        <Description>
          The current field being computed.
        </Description>
      </Argument>
      <Argument name="current" type="Object">
        <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
      </Argument>
      <Argument name="operation" type="ProvisioningPlan.Operation">
        <Description>
          The operation being performed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
 
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;
  import sailpoint.object.Identity;
  import sailpoint.object.Custom;

  import sailpoint.tools.GeneralException;
  import sailpoint.tools.Util;

  import sailpoint.object.Identity;
  import sailpoint.object.Application;
  import sailpoint.object.Attributes;
  import sailpoint.object.Custom;
  import sailpoint.object.Link;
  import sailpoint.api.SailPointContext;
  import sailpoint.api.SailPointFactory;
  import sailpoint.api.IdentityService;
  import javax.naming.NamingEnumeration;
  import javax.naming.directory.DirContext;
  import javax.naming.Context;
  import javax.naming.directory.DirContext;
  import javax.naming.directory.InitialDirContext;
  import javax.naming.directory.SearchControls;
  import javax.naming.directory.SearchResult;
  import javax.naming.NamingException;
  import org.apache.commons.lang.StringUtils;

  import java.util.*;

 // Function to check for duplicate CN

  public static Hashtable getConnectionDetails(SailPointContext context, String appName) throws NamingException, GeneralException {

    Application application = context.getObject(Application.class, appName);
    if (null == application) {
      return null;
    }
    List domainList = (List) application.getAttributes().get("domainSettings");
    Map domainMap = (Map) domainList.get(0);
    String ldapSearchBase = (String) domainMap.get("domainDN");
    String port = (String) domainMap.get("port");
    String auth = (String) domainMap.get("authorizationType");
    String pass = context.decrypt((String) domainMap.get("password"));
    String user = (String) domainMap.get("user");

    List server = (List) domainMap.get("servers");
    String strServer = (String) server.get(0);
    String url = "ldap://" + strServer + ":" + port;

    Hashtable ldapEnv = new Hashtable();
    ldapEnv.put(Context.PROVIDER_URL, url);
    ldapEnv.put(Context.SECURITY_AUTHENTICATION, auth);
    ldapEnv.put(Context.SECURITY_PRINCIPAL, user);
    ldapEnv.put(Context.SECURITY_CREDENTIALS, pass);
    ldapEnv.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    return ldapEnv;
  }

  public boolean checkDistinguishedName(String val) {

    String searchFilter = "(&(objectClass=user)(cn=" + val + "))";
    String applicationName = "Active Directory";
    String appSearchDn = "DC=columnittest,DC=com";

    boolean returnBoolean = false;
    boolean retVal = false;


    System.out.println("Checking if records for [" + searchFilter + "] are present in [" + applicationName + "]");

    boolean isSecureBind = false;

    DirContext ctx = null;
    NamingEnumeration results;
    try {

      Hashtable env = getConnectionDetails(context, applicationName);

      ctx = new InitialDirContext(env);

      SearchControls searchControls = new SearchControls();
      searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);

      if (log.isDebugEnabled()) {
        log.debug("searchFilter :: [" + searchFilter + "]");
        log.debug("SEARCH AREA :: " + appSearchDn);
      }

      results = ctx.search(appSearchDn, searchFilter, searchControls);

      log.debug(results);

      if (results.hasMoreElements()) {
         System.out.println("Records FOUND :: " + applicationName);
        retVal = true;
      } else {
         System.out.println("Records NOT FOUND :: " + applicationName);
        retVal = false;
      }

      ctx.close();
      ctx = null;

    } catch (NamingException e) {
      e.printStackTrace();
      throw new GeneralException(e.getMessage());
    } finally {
      if (ctx != null) {
        try {
          ctx.close();
        } catch (Exception e) {
          ; // do nothing
        } finally {
          ctx = null;
        }
      }
    }

    return retVal;
  }

  // Expect: sailpoint.object.Identity 

  Logger logger = Logger.getLogger("Provisioning-policy-AD");
  logger.setLevel(Level.DEBUG);

  //Generate CN

  String cnName = null;
  boolean createOperation = false;

  IdentityService svc = new IdentityService(context);
  List accounts = svc.getLinks(identity, application);
  if (accounts.isEmpty()) {
    createOperation = true;
  }

  System.out.println("Updated createOperation :"+createOperation);
  if (createOperation) {
   System.out.println("Inside Create Operation if loop");
    int iteration = 1;
    do {
      if(iteration==1){
        System.out.println("Inside Create Operation if loop1");
        cnName = identity.getFirstname() + " " + identity.getLastname();
        iteration++;
      }
      else {
       System.out.println("Inside Create Operation if loop2");
        cnName = identity.getFirstname() + " " + identity.getLastname();
        cnName = cnName + Integer.toString( iteration );
        iteration++;
      }
    } while ( checkDistinguishedName ( cnName ) );
    System.out.println("Calculated CnNAME:"+cnName);
  }
  else {
    for (Link link : accounts) {
      cnName = link.getAttribute("cn");
      break;
    }
  }


  String name = identity.getName();
  String entity =(String) identity.getAttribute("entity");
  String type =(String) identity.getAttribute("type");
  String department = (String) identity.getAttribute("department");
  String subDepartment = (String) identity.getAttribute("subDepartment");
  String fullDN = null;
  String newDn = "";


  //Get custome Object for all OU Mappings for AD i.e.Highmetric-Custom-AD-OU Mappings


  Custom customObj = context.getObjectByName(Custom.class, "Highmetric-Custom-AD-OU Mappings");
  String baseDN =customObj.getString("baseDn");
  String defaultOU =customObj.getString("defaultOU");
  String entityOU =customObj.getString(entity);


  // For contractor

  if (sailpoint.tools.Util.isNotNullOrEmpty(type) && "contractor".equalsIgnoreCase(type)
      && sailpoint.tools.Util.isNotNullOrEmpty(entity)) {

    if (null != customObj.get(entity) && !"NONE".equalsIgnoreCase((String) customObj.get(entity))) {

      newDn = customObj.get("ContractorOU")+"," + customObj.get(entity) + "," + baseDN;

    } else {

      newDn = defaultOU + "," + baseDN;
    }

  }

  // For Employee
  if(sailpoint.tools.Util.isNotNullOrEmpty(type) && "employee".equalsIgnoreCase(type))
  {

    if (null != customObj.get(entity) && !"NONE".equalsIgnoreCase((String) customObj.get(entity)) && null != department
          && sailpoint.tools.Util.isNotNullOrEmpty(department)) 
    {

      if (null != subDepartment && sailpoint.tools.Util.isNotNullOrEmpty(subDepartment)) 
      {

        newDn = "OU=" + subDepartment + ",OU=" + department + "," + customObj.get(entity) + "," + baseDN;
      }
      else
      {
        newDn = "OU=" + department + "," + customObj.get(entity) + "," + baseDN;
      }

    } 
    else 
    {

      newDn = defaultOU + "," + baseDN;
    }

  }
  logger.debug("newDn==>"+newDn);
  
  fullDN="CN="+cnName+","+newDn;

  logger.debug("fullDN==>"+fullDN);
  return fullDN;
  ]]></Source>
</Rule>

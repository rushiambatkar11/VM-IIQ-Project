<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule  language="beanshell"  name="Test-Rushi-Rule-ADP">
  <Source><![CDATA[
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.log4j.Logger;
import connector.common.JsonUtil;
import sailpoint.api.SailPointContext;
import sailpoint.tools.Util;

   private String TOKEN_URL = "https://accounts.adp.com/auth/oauth/v2/token";
   private String CLIENT_ID = "4ecca3e4-9116-4b36-bc36-57b9678a14d7";
   private String CLENT_SECRET = "ccbe9020-6e93-42e7-8c69-3c03e77edaa0";
   private String RESOURCE = "https://accounts.adp.com";

   public static StringBuilder getDataString(HashMap params)
   {
	  HashMap hashMap = params;
	  StringBuilder result = new StringBuilder();
	  try
	  {

		 if(!Util.isEmpty(params))
		 {
			boolean first = true;
			Iterator itr = params.entrySet().iterator();
			while (itr.hasNext())
			{
			   Map.Entry entry = (Map.Entry) itr.next();
			   if(Util.isNotNullOrEmpty((String) entry.getKey()) && Util.isNotNullOrEmpty((String) entry.getValue()))
			   {
				  if(first)
				  {
					 first = false;
				  } else
				  {
					 result.append("&");
				  }
				  result.append(URLEncoder.encode((String) entry.getKey(), "UTF-8"));
				  result.append("=");
				  result.append(URLEncoder.encode((String) entry.getValue(), "UTF-8"));
			   }
			}
			sailpoint.tools.Util.flushIterator(itr);
		 }

	  } catch (Exception e)
	  {
		 log.debug("Exception:" + e);
	  }
	  return result;

   }

   public String getToken()
   {

	  String accessToken = "";
	  HashMap header = new HashMap();
	  header.put("grant_type", "client_credentials");
	  header.put("client_id", CLIENT_ID);
	  header.put("resource", RESOURCE);
	  header.put("client_secret", CLENT_SECRET);

	  String request = getDataString(header).toString();
	  byte[] bytes = request.getBytes();
	  URL urlServer = (new URI(TOKEN_URL)).toURL();
	  HttpURLConnection connection = (HttpURLConnection) urlServer.openConnection();
	  connection.setAllowUserInteraction(false);
	  connection.setDoOutput(true);
	  connection.setDoInput(true);
	  connection.setUseCaches(true);
	  connection.setRequestMethod("POST");
	  connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
	  connection.setRequestProperty("Content-Length", String.valueOf(bytes.length));
	  connection.connect();
	  OutputStream out = connection.getOutputStream();
	  out.write(bytes);
	  out.close();
	  int code = connection.getResponseCode();
	  if(code == 200)
	  {
		 Map jsonObject = null;
		 BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));

		 StringBuffer paramBuffer = new StringBuffer();
		 String inputLine = "";
		 while (Util.isNotNullOrEmpty(inputLine = bufferedReader.readLine()))
			paramBuffer.append(inputLine);
		 bufferedReader.close();
		 jsonObject = JsonUtil.toMap(paramBuffer.toString());
		 accessToken = (String) jsonObject.get("access_token");
	  }
	  return "test=>"+code;

   }
  ]]></Source>
</Rule>

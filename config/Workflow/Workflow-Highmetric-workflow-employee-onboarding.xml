<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="Highmetric-Workflow-Employee-Onboarding" type="IdentityUpdate">
  <Variable input="true" name="launcher"/>
  <Variable initializer="string:Employee-Onboarding" input="true" name="flow"/>
  <Variable input="true" name="quickLinkIdentityId"/>
  <Variable name="identityRequestId" output="true"/>
  <Variable name="project" output="true"/>
  <Variable input="true" name="httpSession" transient="true"/>
  <Variable input="true" name="plan"/>
  <Variable input="true" name="identityName"/>
  <Variable name="modelMap"/>
  <Variable initializer="true" name="transient"/>
  <Variable initializer="true" input="true" name="foregroundProvisioning"/>
  <Variable name="launcherName">
    <Script>
      <Source><![CDATA[
        return context.getObjectById(Identity.class,quickLinkIdentityId).getName();
      ]]></Source>
    </Script>
  </Variable>
  <Variable initializer="Highmetric-Form-Employee-Onboarding" input="true" name="employeeOnboardingForm"/>
  <Variable initializer="Highmetric-Form-Duplicate-User" input="true" name="duplicateCheckForm"/>
  <Variable initializer="Employee HR" input="true" name="hrmsApp"/>
  <Variable input="true" name="httpSession" transient="true"/>
  <Variable name="userType"/>
  <Variable name="entity"/>
  <Variable name="createdDate"/>
  <Variable name="createdBy"/>
  <Variable name="salutation"/>
  <Variable name="username"/>
  <Variable name="firstname"/>
  <Variable name="dupIdentities"/>
  <Variable name="lastname"/>
  <Variable name="middleName"/>
  <Variable name="manager"/>
  <Variable name="jobTitle"/>
  <Variable name="otherJobTitle"/>
  <Variable name="domain"/>
  <Variable name="startDate"/>
  <Variable name="department"/>
  <Variable name="orientationDate"/>
  <Variable name="travelBonus"/>
  <Variable name="homeaddress"/>
  <Variable name="personalemail"/>
  <Variable name="primaryphone"/>
  <Variable name="secondaryphone"/>
  <Variable name="country"/>
  <Variable name="residentialState"/>
  <Variable name="remoteFromState"/>
  <Variable name="remoteToCountry"/>
  <Variable name="remoteToState "/>
  <Variable name="remote"/>
  <Variable name="subDepartment"/>
  <Variable name="office"/>
  <Variable name="entityEmail "/>
  <Variable name="region"/>
  <Variable name="practiceLine"/>
  <Variable name="axDepartment"/>
  <Variable name="comments"/>
  <Variable name="orientationDate"/>
  <Variable name="backButton"/>
  <Variable initializer="true" input="true" name="trace"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Highmetric-Common-Rule-Library"/>
    <Reference class="sailpoint.object.Rule" name="Highmetric-JDBC-Rule-Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="226" posY="126">
    <Approval name="Create identity" owner="ref:launcher" return="axDepartment,userType,entity,createdDate,createdBy,salutation,firstname,middleName,lastname,manager,jobTitle,username,domain,entityEmail,startDate,orientationDate,travelBonus,homeaddress,personalemail,primaryphone,secondaryphone,remote,country,residentialState,remoteFromState,remoteToCountry,remoteToState,office,region,practiceLine,comments,otherJobTitle" send="launcherName,axDepartment,userType,entity,createdDate,createdBy,salutation,firstname,middleName,lastname,manager,jobTitle,username,domain,entityEmail,startDate,orientationDate,travelBonus,homeaddress,personalemail,primaryphone,secondaryphone,remote,country,residentialState,remoteFromState,remoteToCountry,remoteToState,office,region,practiceLine,comments,otherJobTitle">
      <Arg name="workItemForm" value="ref:employeeOnboardingForm"/>
      <Arg name="createdBy" value="ref:launcher"/>
    </Approval>
    <Transition to="Duplicate Check"/>
  </Step>
  <Step icon="Default" name="Duplicate Check" posX="588" posY="126" resultVariable="dupIdentities">
    <Script>
      <Source><![CDATA[
        import sailpoint.object.Identity; 
        import sailpoint.object.QueryOptions;
        import sailpoint.object.Filter;
        import java.util.List;
        import java.util.ArrayList;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("Rule-Check-Duplicate");
        logger.setLevel(Level.DEBUG);


        QueryOptions qo = new QueryOptions();
        List dupIdentities = new ArrayList();
  
        if(null != firstname && null != lastname)
        {
         logger.debug("First Name===>"+ firstname);
         logger.debug("Last Name===>"+ lastname);

        qo.addFilter(Filter.eq("firstname",firstname));
        qo.addFilter(Filter.eq("lastname", lastname));



        List listDupIdentities = context.getObjects(Identity.class,qo);


        if (null != listDupIdentities) {

        for (Identity idn : listDupIdentities) {

        logger.debug("Identity"+ idn.getName());
        dupIdentities.add(idn.getName());
        context.decache();
        }
        }

        logger.debug("dupIdentities===>"+ dupIdentities);
        return dupIdentities;
        }
      ]]></Source>
    </Script>
    <Transition to="Create Plan">
      <Script>
        <Source><![CDATA[

        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("Rule-Check-Duplicate");
        logger.setLevel(Level.DEBUG);
        
        logger.debug("Stop dupIdentities===>"+dupIdentities);
        
        Object obj = dupIdentities;
     	
		if(obj !=null && obj instanceof List)
		{
			logger.debug("True");
			ArrayList al =(ArrayList) obj;
			
			if(al.size()==0)
			{
			
			logger.debug("Array Size is 0");
			return true;
			}
			
		 }
		return false;
       
      ]]></Source>
      </Script>
    </Transition>
    <Transition to="Duplicate Identity Form"/>
  </Step>
  <Step icon="Default" name="Duplicate Identity Form" posX="588" posY="126">
    <Approval name="Create identity" owner="ref:launcher" return="backButton" send="launcherName">
      <Arg name="workItemDescription" value="ref:duplicateCheckForm"/>
      <Arg name="workItemForm" value="ref:duplicateCheckForm"/>
      <Arg name="createdBy" value="ref:launcher"/>
      <Arg name="duplicateIdentityList" value="ref:dupIdentities"/>
    </Approval>
    <Transition to="Start">
      <Script>
        <Source><![CDATA[
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("Rule-Check-Duplicate");
        logger.setLevel(Level.DEBUG);
        
     
       if(backButton !=null && sailpoint.tools.Util.isNotNullOrEmpty(backButton))
          {

         if(backButton.equalsIgnoreCase("previous"))
         {
         
         logger.debug("backButton value==>"+backButton);
         
         return true;
         
         }
         }
		return false;
       
      ]]></Source>
      </Script>
    </Transition>
    <Transition to="Create Plan"/>
  </Step>
  <Step icon="Default" name="Create Plan" posX="296" posY="126" resultVariable="plan">
    <Script>
      <Source><![CDATA[
        import java.util.HashMap;
        import java.util.Calendar;
        import java.util.GregorianCalendar;
        import sailpoint.object.Link;
        import sailpoint.object.Identity;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import java.util.List;
        import sailpoint.api.Provisioner;
        import sailpoint.object.Application;
        import sailpoint.object.IdentityEntitlement;
        import java.text.SimpleDateFormat;
        import java.util.Date;
        import java.util.Map;
        import sailpoint.api.IdentityService;
        import sailpoint.api.ObjectUtil;
        import java.util.ArrayList;
        import java.util.Arrays;
        import sailpoint.object.Custom; 
        import sailpoint.object.Attributes;
        import java.util.Collections;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;


        Logger logger = Logger.getLogger("Highmetric Employee Onboarding : ");
        logger.setLevel(Level.DEBUG);

        //Identity identity = new Identity();
        //identity.setName(username);
        //logger.debug("Printitng identity : "+identity);

        String idname = username;
        identityName = idname;

        logger.debug("Printing identityname idname : "+identityName);
        
        logger.debug("previous===> "+previous);

        HashMap modelMap = new HashMap();



        // Evalute AD Depatrment and Sub Depatment based on AX Department
        if (null != axDepartment){


        Custom axDep = context.getObjectByName(Custom.class,"Highmetric-Custom-AX-Department");

        if(axDep!=null)
        {
        Attributes attr = axDep.getAttributes();

        if(attr!=null)
        {
        Object obj = axDep.get(axDepartment);

        if(obj!=null && obj instanceof Map)
        {
        HashMap depMap = (HashMap) obj;

        if(depMap!=null)
        {
        if(depMap.get("adDepartment")!=null)
        {
        department = (String)depMap.get("adDepartment");
        }
        if(depMap.get("adSubDepartment")!=null)
        {
        subDepartment = (String)depMap.get("adSubDepartment");
        }
        }
        }
        if(obj!=null && obj instanceof String)
        {
        String adDep = (String)obj;
        if(adDep !=null && sailpoint.tools.Util.isNotNullOrEmpty(adDep))
        {
        department = adDep;
        }
        }

        if (null != department){ 

        modelMap.put("department", department);
        }     

        if (null != subDepartment){
        modelMap.put("sub_department", subDepartment);
        }
        }
        logger.debug("Departmrnt===>"+department);
        logger.debug("SubDepartmrnt===>"+subDepartment);
        logger.debug("axDepartment ===>"+axDepartment);
        

        }

        modelMap.put("ax_department", axDepartment);
        }


        if (null != entity){ 
        modelMap.put("entity", entity); 
        }
        if (null != country){ 
        modelMap.put("country", country); 
        }
        if (null != createdDate)
        {
        modelMap.put("created_date", createdDate); 
        }
        if (null != createdBy){ 
        modelMap.put("created_by", createdBy);
        }
        if (null != salutation){
        modelMap.put("salutation", salutation);
        }
        if (null != firstname){ 
        modelMap.put("firstname", firstname);
        }
        if (null != middleName){  
        modelMap.put("middlename", middleName);
        }
        if (null != lastname){  
        modelMap.put("lastname", lastname);
        }
        if (null != manager)
        {  
        Identity mgrId=(Identity)context.getObject(Identity.class, manager);
        modelMap.put("report_to_manager",mgrId.getName());
        logger.debug("Printing manager in modelMap : "+mgrId.getName());
        }


        if (null != jobTitle)
        {             
        if(null!=otherJobTitle)
        {
        modelMap.put("jobtitle", otherJobTitle); 
        }
        else
        {
        modelMap.put("jobtitle", jobTitle); 
        }
        }
        if (null != username){ 
        modelMap.put("username", username); 
        }
        if (null != domain){ 
        modelMap.put("primary_domain", domain); 
        }
        if (null != entityEmail){
        modelMap.put("entity_email", entityEmail); 
        }        
        if (null!=startDate)  { 
        modelMap.put("start_date", startDate);    
        }      
        if (null != orientationDate){ 
        modelMap.put("orientation_date", orientationDate); 
        }
        if (null != travelBonus){ 
        modelMap.put("travel_bonus", travelBonus);
        }
        if (null != homeaddress){
        modelMap.put("home_address", homeaddress); 
        }
        if (null != personalemail){ 
        modelMap.put("personal_email", personalemail);
        }
        if (null != primaryphone){ 
        modelMap.put("primary_phone", primaryphone); 
        }
        if (null != secondaryphone){  
        modelMap.put("secondary_phone", secondaryphone); 
        }
        if (null != remote){
        modelMap.put("remote", remote); 
        }
        if (null != residentialState){ 
        modelMap.put("residential_state", residentialState); 
        }
        if (null != remoteFromState){
        modelMap.put("remote_from_state", remoteFromState); 
        }
        if (null != remoteToCountry){ 
        modelMap.put("remote_to_country", remoteToCountry);
        }
        if (null != remoteToState){ 
        modelMap.put("remote_to_state", remoteToState);
        }
        if (null != office){
        modelMap.put("office_location", office); 
        }
        if (null != region){
        modelMap.put("region", region);
        }


        if (null != practiceLine){
        modelMap.put("practice_line", practiceLine);
        }
        if (null != comments){
        modelMap.put("comments", comments); 
        }        
        if (null != userType) { 
        modelMap.put("user_type", userType);
        modelMap.put("status", "active");
        }      
        ProvisioningPlan plan = new ProvisioningPlan();
        //plan.setIdentity(identity);
        logger.debug("Creating Plan for Employee HR");

        if (modelMap != null)
        {
        logger.debug("Printitng inside if statement");

        AccountRequest accReq = new AccountRequest();
        accReq.setApplication(hrmsApp);
        accReq.setNativeIdentity(idname);
        accReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Create);

        for (Map.Entry entry : modelMap.entrySet())
        {
        Object obj = entry.getValue();

        if (obj != null && obj instanceof Date)
        {

        String temp = new SimpleDateFormat("MM/dd/yyyy").format(obj);       

        accReq.add(new AttributeRequest((String) entry.getKey(), ProvisioningPlan.Operation.Set,
        temp == null ? null : temp));
        } 
        else if (obj != null && obj instanceof String) 
        {
        accReq.add(new AttributeRequest((String) entry.getKey(), ProvisioningPlan.Operation.Set,
        entry.getValue() == null ? null : entry.getValue()));
        }
        }

        //set isterminated attribute value "NO" to the account request
        accReq.add(new AttributeRequest("is_terminated", ProvisioningPlan.Operation.Set,"NO"));

        plan.add(accReq);
        logger.debug("Printing plan for Employee HR Application :"+plan.toXml());

        return plan;  
        }

      ]]></Source>
    </Script>
    <Transition to="Show message"/>
  </Step>
  <Step icon="Default" name="Show message" posX="414" posY="126">
    <Script>
      <Source><![CDATA[
      
        import java.util.ArrayList;
        import java.util.List;
        import javax.faces.application.FacesMessage;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;
        Logger  logger = Logger.getLogger("Highmetric Employee Onboarding : ");
        logger.setLevel(Level.DEBUG);
        List currentMessages = httpSession.getAttribute("sailpoint.web.PageCodeBase.sessionMessages");
        FacesMessage myMessage = new FacesMessage(FacesMessage.SEVERITY_INFO, "Request Submitted Sucessfully", "");
        List myMessages = new ArrayList();
        myMessages.add(myMessage);
        httpSession.setAttribute("sailpoint.web.PageCodeBase.sessionMessages", myMessages);]]></Source>
    </Script>
    <Transition to="Process JDBC Plan"/>
  </Step>
  <Step icon="Default" name="Process JDBC Plan" posX="540" posY="126" resultVariable="plan">
    <Script>
      <Source><![CDATA[
        import sailpoint.object.ProvisioningResult;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;


        Logger logger = Logger.getLogger("Process JDBC Plan");
        logger.setLevel(Level.DEBUG);


        ProvisioningResult result = processJDBCPlan(plan);

        plan.setResult(result);

        return plan;

      ]]></Source>
    </Script>
    <Transition to="Single Account Aggregation"/>
  </Step>
  <Step icon="Default" name="Single Account Aggregation" posX="706" posY="126">
    <Script>
      <Source><![CDATA[
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;


        Logger logger = Logger.getLogger("Single Account Aggregation");
        logger.setLevel(Level.DEBUG);


        logger.debug("username==>"+username);
        logger.debug("applicationName==>"+hrmsApp);


        String accountAggregate = singleAccountAggregation(username,hrmsApp);

        logger.debug("accountAggregate==>"+accountAggregate);

      ]]></Source>
    </Script>
    <Transition to="Audit"/>
  </Step>
  <Step icon="Audit" name="Audit" posX="875" posY="126">
    <Script>
      <Source><![CDATA[
        import sailpoint.server.Auditor;
        import sailpoint.object.AuditEvent;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
        import sailpoint.object.ProvisioningResult;
        import sailpoint.object.ProvisioningProject;
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Identity;
        import sailpoint.object.IdentityRequest;
        import sailpoint.object.Attributes;
        import java.util.List;
        import sailpoint.tools.GeneralException;
        import sailpoint.tools.Message;
        import sailpoint.tools.Util;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("Highmetric Employee Onboarding : ");
        logger.setLevel(Level.DEBUG);

        List plans;
        ProvisioningPlan currentPlan;

        String identityName = username;

        logger.debug("Identity name contains==>" + identityName);
        Identity identity = context.getObjectByName(Identity.class, identityName);

        List planerrorMessages = new ArrayList();
        List apperrorMessages = new ArrayList();
        String Targetapp;
        String action;
        String toEmail = "IAMSupport@Highmetric.com";
        String auditSource = "Workflow: " + wfcontext.getWorkflow().getName();

        ProvisioningPlan plan1 = plan;
        List <AccountRequest > accReqs = plan1.getAccountRequests();
        String Instance = "";
        String NativeIdentity = "";
        String SEPARATOR = ",";
        String Operror = "";
        String Oaerror = "";
        Attributes attrs = new Attributes();
        List attributeRequests;
        if (accReqs != null) {
        for (AccountRequest accReq: accReqs) {
        Instance = accReq.getInstance();
        NativeIdentity = accReq.getNativeIdentity();
        if (null != accReq.getAttributeRequests()) {
        attributeRequests = accReq.getAttributeRequests();
        if (!attributeRequests.isEmpty()) {
        for (AttributeRequest attributeRequest: attributeRequests) {
        attrs.put(attributeRequest.getName(), attributeRequest.getValue());
        }
        }
        }
        }
        }
        if (plan1.getResult() != null) {
        logger.debug("Inside plan result");
        ProvisioningResult result = plan1.getResult();
        Targetapp = plan1.getTargetIntegration();
        List planMessages = plan1.getResult().getErrors();
        if (planMessages != null) {
        logger.debug("Provisioning plan contains Error");
        List planWarningMessages = plan1.getResult().getWarnings();
        if (planWarningMessages != null) {
        planMessages.addAll(planWarningMessages);
        }
        for (int k = 0; k < planMessages.size(); k++) {
        Message message = (Message) planMessages.get(k);
        planerrorMessages.add(message.getType().toString() + " message " + message.getMessage());
        StringBuilder pBuilder = new StringBuilder();
        for (String perror: planerrorMessages) {
        pBuilder.append(perror);
        pBuilder.append(SEPARATOR);
        }
        Operror = pBuilder.toString();
        }
        }
        if (null != plan1.getResult()) {
        logger.debug("result of the plan==>" + result.getStatus());
        if (result.getStatus().equals(ProvisioningResult.STATUS_COMMITTED)) {
        logger.debug("result of the plan STATUS_COMMITTED");
        action = "STATUS_COMMITTED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Employee Onboarding Provision has committed");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_QUEUED)) {
        logger.debug("result of the plan STATUS_QUEUED");
        action = "STATUS_QUEUED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Employee Onboarding Provision has queued");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_FAILED)) {
        logger.debug("result of the plan STATUS_FAILED");
        action = "STATUS_FAILED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4(Operror);
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        }
        }
        else {
        logger.debug("result contains in the Account request");
        List requests = plan1.getAccountRequests();
        AccountRequest request;
        if (requests != null) {
        logger.debug("Plan contains AccountRequests" + requests.size());
        for (int j = 0; j < requests.size(); j++) {
        request = (AccountRequest) requests.get(j);
        Targetapp = request.getApplicationName();
        ProvisioningResult result = request.getResult();
        if (result != null) {
        logger.debug("ProvisioningResult in a AccountRequests");
        List messages = result.getErrors();
        List warnings = result.getWarnings();
        if (messages != null) {
        if (warnings != null) {
        messages.addAll(warnings);
        }
        for (int k = 0; k < messages.size(); k++) {
        Message message = (Message) messages.get(k);
        apperrorMessages.add(message.getType().toString() + " message " + message.getMessage());
        StringBuilder aBuilder = new StringBuilder();
        for (String aerror: apperrorMessages) {
        aBuilder.append(aerror);
        aBuilder.append(SEPARATOR);
        }
        Oaerror = aBuilder.toString();
        }
        }
        }
        if (null != request.getResult()) {
        logger.debug("Account Request result contains===>" + result.getStatus());
        if (result.getStatus().equals(ProvisioningResult.STATUS_COMMITTED)) {
        logger.debug("Account Request result STATUS_COMMITTED");
        action = "STATUS_COMMITTED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Employee Onboarding Provision has committed");
        Auditor.log(event);
        context.commitTransaction();
        }
        logger.debug("Auditor is comitted");
        //send the email notification to the users.
        //Email(identityName);
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_QUEUED)) {
        logger.debug("Account Request result STATUS_QUEUED");
        action = "STATUS_QUEUED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Employee Onboarding Provision has queued");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_FAILED)) {
        logger.debug("Account Request result STATUS_FAILED");
        action = "STATUS_FAILED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4(Oaerror);
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        }
        }
        }
        }                
      ]]></Source>
    </Script>
    <Transition to="Refresh Account Identity Cube"/>
  </Step>
  <Step action="call:refreshIdentity" icon="task" name="Refresh Account Identity Cube" posX="1014" posY="126">
    <Arg name="identityName" value="ref:username"/>
    <Arg name="processTriggers" value="true"/>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="refreshManagerStatus" value="true"/>
    <Description>  
      Add arguments as necessary to enable refresh features.  Typically you  
      only want this to correlate roles.  We might want provisioning, etc.  
    </Description>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="1276" posY="126"/>
</Workflow>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" monitored="true" name="Highmetric-Workflow-Extend-Contractor" type="IdentityUpdate">
  <Variable initializer="true" input="true" name="transient"/>
  <Variable editable="true" name="identityName" output="true"/>
  <Variable name="plan"/>
  <Variable initializer="string:Contractor Extension" name="flow"/>
  <Variable name="extensionType"/>
  <Variable input="true" name="launcher"/>
  <Variable input="true" name="httpSession" transient="true"/>
  <Variable initializer="true" input="true" name="foregroundProvisioning"/>
  <Variable initializer="false" input="true" name="trace"/>
  <Variable name="project" output="true"/>
  <Variable name="identityRequestId" output="true">
    <Description>The sequence id of the Identity request object which is stored in 
      the name field of the identity request.
    </Description>
  </Variable>
  <Variable initializer="Contractor HR" input="true" name="hrmsApp"/>
  <Variable initializer="Active Directory" input="true" name="adApplication"/>
  <Variable input="true" name="requester"/>
  <Variable name="contractorstatus"/>
  <Variable name="extendedBy"/>
  <Variable name="selectcontractor"/>
  <Variable name="username"/>
  <Variable name="entity"/>
  <Variable name="manager"/>
  <Variable name="accountExpires"/>
  <Variable name="projectmanager"/>
  <Variable name="projectNumber"/>
  <Variable name="typeOfHire"/>
  <Variable name="accountManager"/>
  <Variable name="contractExtendDate"/>
  <Variable name="extendInformation"/>
  <Variable name="modelMap"/>
  <Description>Extend /reduce  the Active and inactive contractor end date</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Highmetric-Common-Rule-Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="28" posY="10">
    <Transition to="Build Form"/>
  </Step>
  <Step name="Build Form" posX="142" posY="11">
    <Approval name="Create identity" owner="ref:launcher" return="contractorstatus,extendedBy,selectcontractor,username,entity,manager,accountExpires,projectmanager,accountManager,contractExtendDate,extendInformation,projectNumber,typeOfHire">
      <Arg name="workItemDescription" value="Highmetric-Form-Contractor-Extension"/>
      <Arg name="workItemForm" value="Highmetric-Form-Contractor-Extension"/>
      <Arg name="extendedBy" value="ref:requester"/>
      <Arg name="workItemType" value="string:Form"/>
    </Approval>
    <Transition to="Create Custom Map"/>
  </Step>
  <Step icon="Default" name="Create Custom Map" posX="167" posY="194" resultVariable="modelMap">
    <Script>
      <Source><![CDATA[
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;
        import sailpoint.object.Identity;
        import java.util.Map;
        import java.util.HashMap;

        Logger logger = Logger.getLogger("Create Custom Map");
        logger.setLevel(Level.DEBUG);


        HashMap modelMap = new HashMap();

        logger.debug("contractorstatus "+contractorstatus);

        logger.debug("Launcher "+launcher);

        logger.debug("Requester "+requester);


        if(username!=null)
        {
        logger.debug("username==>"+username);

        modelMap.put("name",username);
        }

        if(entity!=null)
        {
        modelMap.put("entity",entity);
        }

        if(extendedBy!=null)
        {
        modelMap.put("extended_by",extendedBy);
        }

        if(contractorstatus!=null && contractorstatus.equalsIgnoreCase("Inactive Contractor"))
        {
        modelMap.put("status","Active");
        }

        if(manager!=null)
        {
        Identity identiyManager= (Identity) context.getObject(Identity.class, manager);
        logger.debug("identiyManager==>"+identiyManager.getName());
        if(identiyManager!=null && identiyManager.getName()!=null)
        {
        modelMap.put("report_to_manager",identiyManager.getName());
        }
        }
        if(projectmanager!=null)
        {

        Identity projectManager =(Identity) context.getObject(Identity.class, projectmanager);
        if(projectManager!=null && projectManager.getName()!=null)
        {

        modelMap.put("project_manager",projectManager.getName());

        }
        }

        if(accountManager!=null)
        {

        Identity accManager = (Identity) context.getObject(Identity.class, accountManager);

        logger.debug("accManager==>"+accManager.getName());

        if(accManager!=null && accManager.getName()!=null)
        {

        modelMap.put("account_manager",accManager.getName());

        }
        }
        if(contractExtendDate!=null)
        {
        modelMap.put("contractExtendDate",contractExtendDate);
        }
        else
        {  
        modelMap.put("contractExtendDate","never");  
        }


        if(extendInformation!=null)
        {
        modelMap.put("extended_comments",extendInformation);
        }

        if(projectNumber!=null)
        {
        modelMap.put("project_number",projectNumber);
        }
        
        if(typeOfHire != null)
        {
        modelMap.put("type_of_hire",typeOfHire);
        }
        
        identityName = modelMap.get("name");

        logger.debug("identityName===>"+identityName);
        logger.debug("modelMap==>"+modelMap);

        return modelMap;

      ]]></Source>
    </Script>
    <Transition to="Create plan"/>
  </Step>
  <Step icon="Default" name="Create plan" posX="264" posY="10" resultVariable="plan">
    <Script>
      <Source><![CDATA[
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;
        import java.util.Date;
        import java.text.DateFormat;
        import java.text.SimpleDateFormat;
        import sailpoint.api.IdentityService;
        import sailpoint.object.Link;
        import sailpoint.object.Identity;
        import sailpoint.object.Application;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;

        import sailpoint.object.Custom;


        Logger logger = Logger.getLogger("Create plan");
        logger.setLevel(Level.DEBUG);


        String name = modelMap.get("name"); 
        String manager = modelMap.get("report_to_manager");

        logger.debug("modelMap in provisioning plan==>"+modelMap);



        logger.debug("name==>"+name);
        logger.debug("manager==>"+manager);

        String managerName="";
        String managerDN="";
        String newEndDate="";
        String dateInMillis="";

        // check contractExtendDate 
        Object obj  = modelMap.get("contractExtendDate");

        logger.debug("obj==>"+obj);

        logger.debug("obj CLASS==>"+obj.getClass().getName());
        logger.debug("accountExpires==>"+accountExpires);

        if (accountExpires.equalsIgnoreCase("never")) {
        newEndDate="never";
        dateInMillis="never";
        logger.debug("newEndDate==>"+newEndDate);
        logger.debug("dateInMillis==>"+dateInMillis);
        }

        else if (obj != null && obj instanceof Date && accountExpires.equalsIgnoreCase("Date"))
        {
        Date endDate = (Date) obj;     
        logger.debug("endDate==>"+endDate);

        long nowLong = endDate.getTime();
        nowLong = (nowLong * 10000L) + 116444736000000000L;
        dateInMillis = String.valueOf(nowLong);
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        newEndDate = formatter.format(endDate);

        }

        String description = "Contract extended to " + newEndDate + " ";

        logger.debug("date in milliseconds format==>"+dateInMillis);


        //Get Identity object by using getObjectByName method
        Identity identity = context.getObjectByName(Identity.class,name);

        String name = identity.getName();
        String entity =(String) modelMap.get("entity");
        String type =(String) identity.getAttribute("type");
        String department = (String) identity.getAttribute("department");
        String subDepartment = (String) identity.getAttribute("subDepartment");
        String newOUDn = null;
        String newDn = "";


        //Get custome Object for all OU Mappings for AD i.e.Highmetric-Custom-AD-OU Mappings


        Custom customObj = context.getObjectByName(Custom.class, "Highmetric-Custom-AD-OU Mappings");
        String baseDN =customObj.getString("baseDn");
        String defaultOU =customObj.getString("defaultOU");




        // For contractor

        if (sailpoint.tools.Util.isNotNullOrEmpty(type) && "contractor".equalsIgnoreCase(type)     && sailpoint.tools.Util.isNotNullOrEmpty(entity)) 
        {

        if (null != customObj.get(entity) && !"NONE".equalsIgnoreCase((String) customObj.get(entity))) 
        {

        newDn = customObj.get("ContractorOU")+"," + customObj.get(entity) + "," + baseDN;

        } else {

        newDn = defaultOU + "," + baseDN;
        }

        }

        IdentityService idnService = new IdentityService(context);

        Application adApp = context.getObjectByName(Application.class, adApplication);

        List adLink = idnService.getLinks(identity, adApp);


        logger.debug("adLink contains in this field==>"+adLink);

        //create ProvisioningPlan object
        ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(identity);
        plan.setNativeIdentity(identity.getName());

        //if user dont have account on active directory create
        if(adLink==null || adLink.size()==0)
        {
        //Create Active Directory Account Request
        AccountRequest adRequest = new AccountRequest();        
        adRequest.setOperation(AccountRequest.Operation.Create);
        adRequest.setApplication(adApplication);

        plan.add(adRequest);

        logger.debug("user dont have account on Active directory plan ==>"+plan.toXml());

        return plan;

        } // close user dont have account on Ad.


        Identity identityManager = identity.getManager();

        logger.debug("identityManager==>"+identityManager);

        if (identityManager != null) {
        managerName = identityManager.getName();
        logger.debug("identityManager mgrName continss==>"+managerName);

        }


        if (!managerName.equalsIgnoreCase(manager)) 	{
        logger.debug("Identity manager and new manager both are different");

        logger.debug("manager contains in this field==>"+manager);

        Identity mgrId = context.getObjectByName(Identity.class, manager);

        if(mgrId!=null)
        {

        logger.debug("manager name for this "+mgrId.getName());
        //return AD Application List
        List links = idnService.getLinks(mgrId, adApp);

        for (Link link: links) {

        //check link is not dissabled or locked
        if(!(link.isDisabled()) && !(link.isLocked()))
        {
        logger.debug("manager identity is not a dissable and it is active");
        managerDN = link.getAttribute("distinguishedName");
        }
        logger.debug("identityManager managerDN contains ==>"+managerDN);
        }
        } 
        }

        // List supportedLinks = identity.getLinks();
        List supportedLinks = idnService.getLinks(identity,0,0);

        logger.debug("supported Link ==>"+supportedLinks);
        if(supportedLinks!=null)
        {
        //Iterate through all the lik that identity have account
        for(Link link :supportedLinks)
        {

        String  app = link.getApplicationName();

        logger.debug("Application app");
        if(link.getApplicationName().equalsIgnoreCase(hrmsApp))
        {		

        logger.debug("Links contsins Contractor HR application Link");
        ProvisioningPlan.AccountRequest acctReq = new ProvisioningPlan.AccountRequest();

        acctReq.setNativeIdentity(link.getNativeIdentity());
        acctReq.setApplication(hrmsApp);
        acctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);

        acctReq.add(new AttributeRequest("termination_comments", ProvisioningPlan.Operation.Set,""));
        acctReq.add(new AttributeRequest("termination_date", ProvisioningPlan.Operation.Set,""));

        if(modelMap.get("status")!=null)
        {
        acctReq.add(new AttributeRequest("status", ProvisioningPlan.Operation.Set,modelMap.get("status")));
        }
        
        if(modelMap.get("project_number")!=null)
        {
        acctReq.add(new AttributeRequest("project_number", ProvisioningPlan.Operation.Set,modelMap.get("project_number")));
        }
        
        if(modelMap.get("type_of_hire")!=null)
        {
        acctReq.add(new AttributeRequest("type_of_hire", ProvisioningPlan.Operation.Set,modelMap.get("type_of_hire")));
        }

        if(modelMap.get("entity")!=null)
        {
        acctReq.add(new AttributeRequest("entity", ProvisioningPlan.Operation.Set,modelMap.get("entity")));
        }

        if(modelMap.get("report_to_manager")!=null)
        {
        acctReq.add(new AttributeRequest("report_to_manager", ProvisioningPlan.Operation.Set,modelMap.get("report_to_manager")));
        }


        if(modelMap.get("project_manager")!=null)
        {
        acctReq.add(new AttributeRequest("project_manager", ProvisioningPlan.Operation.Set,modelMap.get("project_manager")));
        }

        if(modelMap.get("account_manager")!=null)
        {
        acctReq.add(new AttributeRequest("account_manager", ProvisioningPlan.Operation.Set,modelMap.get("account_manager")));
        }

        if(newEndDate!=null)
        {
        acctReq.add(new AttributeRequest("contract_end_date", ProvisioningPlan.Operation.Set,newEndDate));
        }


        if(modelMap.get("extended_comments")!=null)
        {
        acctReq.add(new AttributeRequest("extended_comments", ProvisioningPlan.Operation.Set,modelMap.get("extended_comments")));
        }


        if(modelMap.get("extended_by")!=null)
        {
        acctReq.add(new AttributeRequest("extended_by", ProvisioningPlan.Operation.Set,modelMap.get("extended_by")));
        }
        
        
        //add account request into the plan.
        plan.add(acctReq);

        }

        // check the identity have Active directory link
        if(link.getApplicationName().equalsIgnoreCase(adApplication))
        {
        logger.debug("inside the Active Directory");
        ProvisioningPlan.AccountRequest adAccountReq = new ProvisioningPlan.AccountRequest();
        adAccountReq.setNativeIdentity(link.getNativeIdentity());
        adAccountReq.setApplication(adApplication);

        //check if link is enabled or not 
        if(link.isDisabled())
        {
        logger.debug("Link is dissabled ");
        adAccountReq.setOperation(AccountRequest.Operation.Enable);
        }
        else
        {
        logger.debug("Link is not disaabled ");
        adAccountReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
        }

        if(dateInMillis!=null)
        {
        adAccountReq.add(new AttributeRequest("accountExpires", ProvisioningPlan.Operation.Set,dateInMillis));
        }

        if(description!=null)
        {
        adAccountReq.add(new AttributeRequest("description", ProvisioningPlan.Operation.Set,description));
        }

        //check managerDN not a null
        if(managerDN!=null && !(managerDN.trim().isEmpty()))
        {	
        adAccountReq.add(new AttributeRequest("manager", ProvisioningPlan.Operation.Set,managerDN));
        }

        if(modelMap.get("entity")!=null)
        {
        String oldEntity = (String)identity.getAttribute("entity");
        logger.debug("Old entity==>"+oldEntity);

        if(!(oldEntity.equalsIgnoreCase((String)modelMap.get("entity"))))
        {
        adAccountReq.add(new AttributeRequest("company", ProvisioningPlan.Operation.Set,modelMap.get("entity")));
        
        adAccountReq.add(new AttributeRequest("AC_NewParent", ProvisioningPlan.Operation.Set, newDn));
        
        
        }
        }
        //add account request into the plan.
        plan.add(adAccountReq);
        logger.debug("plan contins===>"+plan.toXml());
        }
        }
        }
        return plan;
      ]]></Source>
    </Script>
    <Transition to="Show message"/>
  </Step>
  <Step icon="Default" name="Call LCM Provisioning" posX="382" posY="10">
    <Arg name="identityEmailTemplate"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="securityOfficerElectronicSignature"/>
    <Arg name="fallbackApprover"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="policiesToCheck"/>
    <Arg name="workItemComments"/>
    <Arg name="project"/>
    <Arg name="approvalSplitPoint"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Arg name="source" value="Task"/>
    <Arg name="identityDisplayName"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="ownerElectronicSignature"/>
    <Arg name="batchRequestItemId"/>
    <Arg name="splitPlans"/>
    <Arg name="doRefresh" value="string:false"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="noTriggers" value="string:true"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="identityElectronicSignature"/>
    <Arg name="identityName" value="string:$(modelMap.name)"/>
    <Arg name="approvalSet"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="filterRejects"/>
    <Arg name="splitProjects"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="approvalEmailTemplate"/>
    <Arg name="ticketManagementApplication"/>
    <Arg name="securityOfficerName"/>
    <Arg name="approvingIdentities"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="ticketId"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="approvalScheme" value="string:none"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="workItemPriority"/>
    <Arg name="managerElectronicSignature"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="splitApprovalSet"/>
    <Arg name="approvalMode" value="string:parallel"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="splitWorkItemComments"/>
    <Arg name="notificationScheme" value="string:none"/>
    <Arg name="policyViolations"/>
    <Arg name="policyScheme" value="string:none"/>
    <Arg name="setPreviousApprovalDecisions"/>
    <Arg name="optimisticProvisioning"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Description>Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into 
      project and checking policy violations.</Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="cart"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Provisioning"/>
    </WorkflowRef>
    <Transition to="Aggregate Contractor HR"/>
  </Step>
  <Step icon="Default" name="Aggregate Contractor HR" posX="580" posY="10">
    <Script>
      <Source><![CDATA[
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("test");
        logger.setLevel(Level.DEBUG);

        String username = modelMap.get("name");

        logger.debug("username==>"+username);

        logger.debug("identityName==>"+identityName);

        String message= singleAccountAggregation(username,hrmsApp);

        logger.debug("Single Account Aggregation Result==>"+message);
      ]]></Source>
    </Script>
    <Transition to="Single AD Account Aggregation"/>
  </Step>
  <Step icon="Default" name="Single AD Account Aggregation" posX="794" posY="10" resultVariable="errorMessage">
    <Script>
      <Source><![CDATA[
        import sailpoint.object.Identity;
        import sailpoint.object.Application;
        import sailpoint.api.IdentityService;
        import sailpoint.object.Link;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("Testing-Rushi-Get-Single-Account-Aggregation");
        logger.setLevel(Level.ALL);


        String name = modelMap.get("name");

        logger.debug("Identity Name in this field==>"+name);
        logger.debug("Active Directory application name==>"+adApplication);


        IdentityService idnService = new IdentityService(context);

        Identity  identity = context.getObjectByName(Identity.class,name);

        Application adApp = context.getObjectByName(Application.class,adApplication);

        List adLink = idnService.getLinks(identity, adApp);

        for(Link link:adLink)
        {

        String appName = link.getApplication().getName();


        String samaccount  = link.getAttribute("sAMAccountName");

        String retrieveDn = retrieveDn(samaccount,appName);


        logger.debug("latest dn===> "+retrieveDn);


        // perfrom the single account aggregation

        if(retrieveDn!=null)
        {

        errorMessage = singleAccountAggregation(retrieveDn,appName);


        logger.debug("errorMessage dn===> "+errorMessage);

        }
        }
      ]]></Source>
    </Script>
    <Transition to="Refresh Account Identity Cube"/>
  </Step>
  <Step action="call:refreshIdentity" icon="task" name="Refresh Account Identity Cube" posX="1056" posY="10">
    <Arg name="identityName" value="string:$(modelMap.name)"/>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="refreshManagerStatus" value="true"/>
    <Description>  
      Add arguments as necessary to enable refresh features.  Typically you  
      only want this to correlate roles.  We might want provisioning, etc.  
    </Description>
    <Transition to="Audit"/>
  </Step>
  <Step icon="Audit" name="Audit" posX="1318" posY="10">
    <Script>
      <Source><![CDATA[
        import sailpoint.server.Auditor;
        import sailpoint.object.AuditEvent;
        import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
        import sailpoint.object.ProvisioningResult;
        import sailpoint.object.ProvisioningProject;
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.IdentityRequest;
        import sailpoint.object.Attributes;
        import sailpoint.tools.GeneralException;
        import sailpoint.tools.Message;
        import sailpoint.tools.Util;
        import sailpoint.object.Application;
        import sailpoint.object.Identity;
        import sailpoint.object.Link;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.Application;
        import sailpoint.api.IdentityService;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;
        import java.util.Map;
        import java.util.HashMap;
        import java.util.List;
        import java.util.ArrayList;
        import java.util.HashSet;
        import java.util.Set;
        import java.util.Collections;


        Logger logger = Logger.getLogger("Contractor Extension");
        logger.setLevel(Level.DEBUG);

        List plans;
        ProvisioningPlan currentPlan;

        String identityName = modelMap.get("name");

        logger.debug("Identity name contains in this field==>"+identityName);

        Identity identity = context.getObjectByName(Identity.class, identityName);

        List planerrorMessages = new ArrayList();
        List apperrorMessages = new ArrayList();
        String Targetapp;
        String action;
        String toEmail = "IAMSupport@Highmetric.com";

        String auditSource = "Workflow: " + wfcontext.getWorkflow().getName();


        logger.debug("IdentityRequest===>"+IdentityRequest);

        IdentityRequest identityRequest = context.getObjectByName(IdentityRequest.class, identityRequestId);

        if (identityRequest == null) {

        logger.debug("IdentityRequest contains a null value");

        return;
        }

        logger.debug("Project contains==>"+project);
        if(null == identityRequest.getProvisionedProject() && null != project){
        plans = project.getIntegrationPlans();
        }else{
        plans = identityRequest.getProvisionedProject().getIntegrationPlans();
        }

        if (plans != null) {

        logger.debug("Inside plan");

        for (int i = 0; i <plans.size(); i++) {
        ProvisioningPlan plan1 = (ProvisioningPlan) plans.get(i);
        List<AccountRequest> accReqs = plan1.getAccountRequests();
        String Instance = "";
        String NativeIdentity = "";
        String SEPARATOR = ",";
        String Operror = "";
        String Oaerror = "";
        Attributes attrs = new Attributes();
        List attributeRequests;
        if (accReqs != null) {
        for (AccountRequest accReq : accReqs) {
        Instance = accReq.getInstance();
        NativeIdentity = accReq.getNativeIdentity();
        if ( null !=  accReq.getAttributeRequests() ) {
        attributeRequests = accReq.getAttributeRequests();
        if ( !attributeRequests.isEmpty() ) {
        for (AttributeRequest attributeRequest : attributeRequests) {
        attrs.put(attributeRequest.getName(),attributeRequest.getValue());
        }
        }
        }
        }
        }
        if (plan1.getResult() != null) {

        logger.debug("Inside plan result");
        ProvisioningResult result = plan1.getResult();
        Targetapp = plan1.getTargetIntegration();
        List planMessages = plan1.getResult().getErrors();
        if (planMessages != null) {
        logger.debug("Provisioning plan contains Error");

        List planWarningMessages = plan1.getResult().getWarnings();

        if (planWarningMessages != null) {
        planMessages.addAll(planWarningMessages);
        }
        for (int k = 0; k <planMessages.size(); k++) {
        Message message = (Message) planMessages.get(k);
        planerrorMessages.add(message.getType().toString() + " message " + message.getMessage());
        StringBuilder pBuilder = new StringBuilder();
        for(String perror : planerrorMessages){
        pBuilder.append(perror);
        pBuilder.append(SEPARATOR);
        }
        Operror = pBuilder.toString();
        }
        }
        if (null != plan1.getResult()) {

        logger.debug("result of the plan==>"+result.getStatus());

        if (result.getStatus().equals(ProvisioningResult.STATUS_COMMITTED)) {

        logger.debug("result of the plan STATUS_COMMITTED");

        action = "STATUS_COMMITTED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Extension Provision has committed");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_QUEUED)) {
        logger.debug("result of the plan STATUS_QUEUED");
        action = "STATUS_QUEUED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Extension Provision has queued");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_FAILED)) {
        logger.debug("result of the plan STATUS_FAILED");
        action = "STATUS_FAILED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4(Operror);
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        }
        }



        else{
        logger.debug("result contains in the Account request");
        List requests = plan1.getAccountRequests();
        AccountRequest request;
        if (requests != null) {

        logger.debug("Plan contains AccountRequests"+requests.size());

        for (int j = 0; j <requests.size(); j++) {

        request = (AccountRequest) requests.get(j);
        Targetapp = request.getApplicationName();
        ProvisioningResult result = request.getResult();
        if (result != null) {
        logger.debug("ProvisioningResult in a AccountRequests");

        List messages = result.getErrors();
        List warnings = result.getWarnings();

        if (messages != null) {
        if (warnings != null) {
        messages.addAll(warnings);
        }
        for (int k = 0; k <messages.size(); k++) {
        Message message = (Message) messages.get(k);
        apperrorMessages.add(message.getType().toString() + " message " + message.getMessage());
        StringBuilder aBuilder = new StringBuilder();
        for(String aerror : apperrorMessages){
        aBuilder.append(aerror);
        aBuilder.append(SEPARATOR);
        }
        Oaerror = aBuilder.toString();
        }
        }
        }
        if (null != request.getResult()) {
        logger.debug("Account Request result contains===>"+result.getStatus());

        if (result.getStatus().equals(ProvisioningResult.STATUS_COMMITTED)) {
        //call the methods that sends thr email notification
        extendEmailTemplete(identityName);
        logger.debug("Account Request result STATUS_COMMITTED");
        action = "STATUS_COMMITTED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Extension Provision has committed");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_QUEUED)) {
        logger.debug("Account Request result STATUS_QUEUED");
        action = "STATUS_QUEUED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Extension Provision has queued");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_FAILED)) {
        logger.debug("Account Request result STATUS_FAILED");
        action = "STATUS_FAILED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4(Oaerror);
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        }
        }
        }
        }
        }
        }
      ]]></Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Show message" posX="312" posY="170">
    <Script>
      <Source><![CDATA[
        import java.util.ArrayList;
        import java.util.List;
        import javax.faces.application.FacesMessage;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        List currentMessages = httpSession.getAttribute("sailpoint.web.PageCodeBase.sessionMessages");
        FacesMessage myMessage = new FacesMessage(FacesMessage.SEVERITY_INFO, "Request submitted sucessfully", "");
        List myMessages = new ArrayList();
        myMessages.add(myMessage);
        httpSession.setAttribute("sailpoint.web.PageCodeBase.sessionMessages", myMessages);
      ]]></Source>
    </Script>
    <Transition to="Call LCM Provisioning"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="1289" posY="198"/>
</Workflow>

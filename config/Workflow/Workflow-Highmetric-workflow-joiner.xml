<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity" monitored="true" name="Highmetric-Workflow-Joiner" type="IdentityLifecycle">
  <Variable input="true" name="trigger"/>
  <Variable input="true" name="event"/>
  <Variable input="true" name="identityName"/>
  <Variable initializer="string:contractor-onboarding" name="flow"/>
  <Variable name="plan"/>
  <Variable name="password"/>
  <Variable name="unique"/>
  <Variable initializer="string:LCM" input="true" name="source"/>
  <Variable initializer="string:true" input="true" name="trace"/>
  <Variable initializer="false" input="true" name="foregroundProvisioning"/>
  <Variable initializer="true" name="transient"/>
  <Variable name="identityRequestId" output="true"/>
  <Variable name="project" output="true"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Highmetric-Common-Rule-Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="11" posY="9">
    <Transition to="Refresh Identity Cube"/>
  </Step>
  <Step action="call:refreshIdentity" icon="task" name="Refresh Identity Cube" posX="215" posY="15">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="promoteAttributes" value="true"/>
    <Description> 
      Add arguments as necessary to enable refresh features.  Typically you  
      only want this to correlate roles.  We might want provisioning, etc.  
    </Description>
    <Transition to="For Flow"/>
  </Step>
  <Step icon="default" name="Check Duplicate AD" posX="11" posY="9" resultVariable="unique">
    <Script>
      <Source><![CDATA[

        import sailpoint.object.Application;

        System.out.println("Inside Duplicate AD");
        int inc = 0;
        boolean isUnique = false;
        String temp = "";
        String userName = "";

        String app = "Active Directory";

        Application application = context.getObjectByName(Application.class, app);

        System.out.println("samAccountName:" + application.getAttributes()); 

        while (!isUnique) {
        temp = inc == 0 ? userName : userName + inc;

        if (isAttributeUnique("sAMAccountName", temp, "Active Directory")) {
        userName = temp;
        isUnique = true;
        }
        inc++;
        }

        System.out.println("User Name:" + userName);

      ]]></Source>
    </Script>
    <Transition to="For Flow"/>
  </Step>
  <Step icon="default" name="For Flow" posX="296" posY="10" resultVariable="flow">
    <Script>
      <Source><![CDATA[

        import sailpoint.object.Identity;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("Flow ");
        logger.setLevel(Level.DEBUG);


        Identity identity = context.getObjectByName(Identity.class,identityName);

        String type=identity.getAttribute("type");

        logger.debug("For Flow:"+type);

        if(type.equalsIgnoreCase("contractor")){

        return "Contractor Onboarding";

        }
        if(type.equalsIgnoreCase("employee")){

        return "Employee Onboarding";
        }

      ]]></Source>
    </Script>
    <Transition to="Create Birthright Plan"/>
  </Step>
  <Step icon="Message" name="Create Birthright Plan" posX="390" posY="10" resultVariable="plan">
    <Script>
      <Source><![CDATA[     
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.Custom;
        import java.util.List;
        import java.util.ArrayList;
        import sailpoint.object.Application;
        import sailpoint.api.IdentityService;
        import sailpoint.object.Link;
        import sailpoint.object.Identity;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;
        import sailpoint.api.PasswordGenerator;
        import sailpoint.object.PasswordPolicy;


        // Expect: sailpoint.object.Identity identityName



        Logger logger = Logger.getLogger("Highmetric NewHire : ");
        logger.setLevel(Level.DEBUG);

        Identity identityObject = context.getObjectByName(Identity.class, identityName);

        logger.debug("identityObject in the new hire life cycle event==>"+identityObject.toXml());

        ProvisioningPlan plan = new ProvisioningPlan();

        if(identityObject!=null)
        {       
        logger.debug("identityObject==>"+identityObject.getName());

        logger.debug("type==>"+identityObject.getAttribute("type"));
        plan.setIdentity(identityObject);
        plan.setNativeIdentity(identityObject.getName());

        // Create Active Directory Account Request
        AccountRequest adRequest = new AccountRequest();        
        adRequest.setOperation(AccountRequest.Operation.Create);
        adRequest.setApplication("Active Directory");

        //set contractEmail Required or Not - Start

        String type=identityObject.getAttribute("type");

        if(type.equalsIgnoreCase("contractor")){

        sailpoint.object.Attributes args = new sailpoint.object.Attributes();        
        String contractorEmail = identityObject.getAttribute("contractorEmail");        
        if(!sailpoint.tools.Util.isNullOrEmpty(contractorEmail) && "Yes".equalsIgnoreCase(contractorEmail)) {       
        args.put("contractorEmail", "Yes");
        } else {
        args.put("contractorEmail", "No");
        }
        adRequest.setArguments(args);
        }

        //set contractEmail Required or Not - End

        String password = null;
        PasswordPolicy policy = context.getObjectByName(PasswordPolicy.class, "Highmetric-PasswordPolicy-Active Directory");
        if(policy!=null)
        {
        password = new PasswordGenerator(context).generatePassword(policy);

        logger.debug("password==>"+password);
        }

        if(password!=null)
        {
        wfcontext.setVariable("password", password);
        adRequest.add(new AttributeRequest("*password*", ProvisioningPlan.Operation.Set,password));

        plan.add(adRequest);

        }

        if(plan!=null)
        {       
        logger.debug("plan==>"+plan.toXml());
        return plan;
        }
        }
      ]]></Source>
    </Script>
    <Transition to="Call LCM Provisioning"/>
  </Step>
  <Step icon="Default" name="Call LCM Provisioning" posX="596" posY="10">
    <Arg name="identityEmailTemplate"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="securityOfficerElectronicSignature"/>
    <Arg name="fallbackApprover"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="policiesToCheck"/>
    <Arg name="workItemComments"/>
    <Arg name="project"/>
    <Arg name="approvalSplitPoint"/>
    <Arg name="identityRequestId"/>
    <Arg name="source"/>
    <Arg name="identityDisplayName"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="ownerElectronicSignature"/>
    <Arg name="batchRequestItemId"/>
    <Arg name="saveUnmanagedPlan_WithProjectArgument"/>
    <Arg name="splitPlans"/>
    <Arg name="doRefresh" value="true"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="identityElectronicSignature"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="approvalSet"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="filterRejects"/>
    <Arg name="splitProjects"/>
    <Arg name="noTriggers" value="string:true"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="approvalEmailTemplate"/>
    <Arg name="ticketManagementApplication"/>
    <Arg name="securityOfficerName"/>
    <Arg name="approvingIdentities"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="ticketId"/>
    <Arg name="approvalScheme" value="none"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="workItemPriority"/>
    <Arg name="managerElectronicSignature"/>
    <Arg name="autoApprove"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="splitApprovalSet"/>
    <Arg name="approvalMode"/>
    <Arg name="trace" value="false"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="splitWorkItemComments"/>
    <Arg name="notificationScheme" value="none"/>
    <Arg name="policyViolations"/>
    <Arg name="policyScheme" value="fail"/>
    <Arg name="setPreviousApprovalDecisions"/>
    <Arg name="optimisticProvisioning"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Provisioning"/>
    </WorkflowRef>
    <Transition to="Audit"/>
  </Step>
  <Step icon="Audit" name="Audit" posX="794" posY="10">
    <Script>
      <Source><![CDATA[
        import sailpoint.server.Auditor;
        import sailpoint.object.AuditEvent;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
        import sailpoint.object.ProvisioningResult;
        import sailpoint.object.ProvisioningProject;
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Identity;
        import sailpoint.object.IdentityRequest;
        import sailpoint.object.Attributes;
        import java.util.List;
        import sailpoint.api.ObjectUtil;
        import sailpoint.tools.GeneralException;
        import sailpoint.tools.Message;
        import sailpoint.tools.Util;
        import org.apache.log4j.Logger;
        import org.apache.log4j.Level;

        Logger logger = Logger.getLogger("Highmetric Leaver : ");
        logger.setLevel(Level.DEBUG);

        List plans;
        ProvisioningPlan currentPlan;

        Identity identity = context.getObjectByName(Identity.class, identityName);

        logger.debug("Identity name contains==>" + identity.getName());

        List planerrorMessages = new ArrayList();
        List apperrorMessages = new ArrayList();
        String Targetapp;
        String action;
        String toEmail = "IAMSupport@Highmetric.com";
        String auditSource = "Workflow: " + wfcontext.getWorkflow().getName();
        logger.debug("IdentityRequest===>" + identityRequestId);
        IdentityRequest identityRequest = context.getObjectByName(IdentityRequest.class, identityRequestId);
        if (identityRequest == null) {
        logger.debug("IdentityRequest contains a null value");
        return;
        }
        logger.debug("Project contains==>" + project);
        if (null == identityRequest.getProvisionedProject() && null != project) {
        plans = project.getIntegrationPlans();
        } else {
        plans = identityRequest.getProvisionedProject().getIntegrationPlans();
        }
        if (plans != null) {
        logger.debug("Inside plan");
        for (int i = 0; i < plans.size(); i++) {
        ProvisioningPlan plan1 = (ProvisioningPlan) plans.get(i);
        List <
        AccountRequest > accReqs = plan1.getAccountRequests();
        String Instance = "";
        String NativeIdentity = "";
        String SEPARATOR = ",";
        String Operror = "";
        String Oaerror = "";
        Attributes attrs = new Attributes();
        List attributeRequests;
        if (accReqs != null) {
        for (AccountRequest accReq: accReqs) {
        Instance = accReq.getInstance();
        NativeIdentity = accReq.getNativeIdentity();
        if (null != accReq.getAttributeRequests()) {
        attributeRequests = accReq.getAttributeRequests();
        if (!attributeRequests.isEmpty()) {
        for (AttributeRequest attributeRequest: attributeRequests) {
        attrs.put(attributeRequest.getName(), attributeRequest.getValue());
        }
        }
        }
        }
        }
        if (plan1.getResult() != null) {
        logger.debug("Inside plan result");
        ProvisioningResult result = plan1.getResult();
        Targetapp = plan1.getTargetIntegration();
        List planMessages = plan1.getResult().getErrors();
        if (planMessages != null) {
        logger.debug("Provisioning plan contains Error");
        List planWarningMessages = plan1.getResult().getWarnings();
        if (planWarningMessages != null) {
        planMessages.addAll(planWarningMessages);
        }
        for (int k = 0; k < planMessages.size(); k++) {
        Message message = (Message) planMessages.get(k);
        planerrorMessages.add(message.getType().toString() + " message " + message.getMessage());
        StringBuilder pBuilder = new StringBuilder();
        for (String perror: planerrorMessages) {
        pBuilder.append(perror);
        pBuilder.append(SEPARATOR);
        }
        Operror = pBuilder.toString();
        }
        }
        if (null != plan1.getResult()) {
        logger.debug("result of the plan==>" + result.getStatus());
        if (result.getStatus().equals(ProvisioningResult.STATUS_COMMITTED)) {
        logger.debug("result of the plan STATUS_COMMITTED");
        action = "STATUS_COMMITTED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Onboarding Provision has committed for AD");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_QUEUED)) {
        logger.debug("result of the plan STATUS_QUEUED");
        action = "STATUS_QUEUED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Onboarding Provision has committed for AD has queued");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_FAILED)) {
        logger.debug("result of the plan STATUS_FAILED");
        action = "STATUS_FAILED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4(Operror);
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        }
        }
        else {
        logger.debug("result contains in the Account request");
        List requests = plan1.getAccountRequests();
        AccountRequest request;
        if (requests != null) {
        logger.debug("Plan contains AccountRequests" + requests.size());
        for (int j = 0; j < requests.size(); j++) {
        request = (AccountRequest) requests.get(j);
        Targetapp = request.getApplicationName();
        ProvisioningResult result = request.getResult();
        if (result != null) {
        logger.debug("ProvisioningResult in a AccountRequests");
        List messages = result.getErrors();
        List warnings = result.getWarnings();
        if (messages != null) {
        if (warnings != null) {
        messages.addAll(warnings);
        }
        for (int k = 0; k < messages.size(); k++) {
        Message message = (Message) messages.get(k);
        apperrorMessages.add(message.getType().toString() + " message " + message.getMessage());
        StringBuilder aBuilder = new StringBuilder();
        for (String aerror: apperrorMessages) {
        aBuilder.append(aerror);
        aBuilder.append(SEPARATOR);
        }
        Oaerror = aBuilder.toString();
        }
        }
        }
        if (null != request.getResult()) {
        logger.debug("Account Request result contains===>" + result.getStatus());
        if (result.getStatus().equals(ProvisioningResult.STATUS_COMMITTED)) {
        joinerEmailTemplete(identityName);     
        notifyPasswordDetails(password,identityName);
        logger.debug("Account Request result STATUS_COMMITTED");
        action = "STATUS_COMMITTED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Onboarding Provision has committed for AD");
        Auditor.log(event);
        context.commitTransaction();
        }
        }

        if (result.getStatus().equals(ProvisioningResult.STATUS_QUEUED)) {
        logger.debug("Account Request result STATUS_QUEUED");
        action = "STATUS_QUEUED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4("Contractor Onboarding Provision has committed for AD has queued");
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        if (result.getStatus().equals(ProvisioningResult.STATUS_FAILED)) {
        logger.debug("Account Request result STATUS_FAILED");
        action = "STATUS_FAILED";
        if (Auditor.isEnabled(action)) {
        AuditEvent event = new AuditEvent();
        event.setSource(auditSource);
        event.setTarget(identityName);
        event.setAction(action);
        event.setApplication(Targetapp);
        event.setInstance(Instance);
        event.setAccountName(NativeIdentity);
        event.setAttributes(attrs);
        event.setString1(identityName);
        event.setString2(Targetapp);
        event.setString3(result.getStatus());
        event.setString4(Oaerror);
        Auditor.log(event);
        context.commitTransaction();
        }
        }
        }
        }
        }
        }
        }
        }
      ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="864" posY="10"/>
</Workflow>
